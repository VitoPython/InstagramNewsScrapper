name: Instagram Scraper CI/CD

on:
  push:
    branches: [ master, main ]
  pull_request:
    branches: [ master, main ]

jobs:
  test:
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:14
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: test_db
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
      
      redis:
        image: redis:6
        ports:
          - 6379:6379
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest pytest-cov
    
    - name: Lint with flake8
      run: |
        pip install flake8
        # Stop the build if there are Python syntax errors or undefined names
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        # Exit-zero treats all errors as warnings
        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
    
    - name: Test with pytest
      env:
        DATABASE_URL: postgresql://postgres:postgres@localhost:5432/test_db
        CELERY_BROKER_URL: redis://localhost:6379/0
        CELERY_BACKEND_URL: redis://localhost:6379/0
      run: |
        pytest --cov=./ --cov-report=xml
    
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        fail_ci_if_error: false

  build-and-push:
    needs: test
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master')
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Login to Docker Hub
      uses: docker/login-action@v2
      with:
        username: ${{ secrets.DOCKER_HUB_USERNAME }}
        password: ${{ secrets.DOCKER_HUB_TOKEN }}
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2
    
    - name: Build and push API
      uses: docker/build-push-action@v4
      with:
        context: .
        file: ./Dockerfile.api
        push: true
        tags: ${{ secrets.DOCKER_HUB_USERNAME }}/instagram-news-api:latest
    
    - name: Build and push Worker
      uses: docker/build-push-action@v4
      with:
        context: .
        file: ./Dockerfile.worker
        push: true
        tags: ${{ secrets.DOCKER_HUB_USERNAME }}/instagram-news-worker:latest
    
    - name: Build and push Beat
      uses: docker/build-push-action@v4
      with:
        context: .
        file: ./Dockerfile.beat
        push: true
        tags: ${{ secrets.DOCKER_HUB_USERNAME }}/instagram-news-beat:latest

  deploy:
    needs: build-and-push
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master')
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v3
    
    - name: Deploy to server
      # In real scenario, you would use SSH to deploy to your server
      # or use cloud-specific deployment actions
      run: |
        echo "Deployment would happen here. Configure based on your hosting provider."
        echo "For example, you could use SSH to connect to your server and pull the latest Docker images."
        # ssh user@server 'cd /path/to/project && docker-compose pull && docker-compose up -d' 